import "resources/demos/Prescription/Collections.obs"

// Prescriptions are immutable by design; pharmacies that want to record information about
// prescriptions must do so in a separate data structure.
contract Prescription {
	string prescriptionText; // specifies the drug, dosage, etc.
	int refills;
	string patientName; // Assume that patient names are unique.

	Prescription@Owned(string prescriptionText, int refills, string patientName) {
		this.prescriptionText = prescriptionText;
		this.refills = refills;
		this.patientName = patientName;
	}

	transaction getRefills(Prescription@Unowned this) returns int {
		return refills;
	}

	transaction getPatientName(Prescription@Unowned this) returns string {
		return patientName;
	}
}

asset contract PharmacyPrescriptionRecord {
    state Empty;

    state HasFills {
        int fillsLeft; // Might be nice to have a nonnegative int type
        Prescription@Owned prescription;
    }

    PharmacyPrescriptionRecord@(Empty | HasFills)(Prescription@Owned >> Unowned presc) {
        if (presc.getRefills() > 0) {
            ->HasFills(fillsLeft = presc.getRefills(), prescription = presc);
        } else {
            ->Empty;
        }
    }

    transaction getPrescription(PharmacyPrescriptionRecord@HasFills this) returns Prescription@Unowned {
        return prescription;
    }

    transaction checkAndUpdateFills(PharmacyPrescriptionRecord@HasFills >> (Empty | HasFills) this) {
        if (fillsLeft > 1) {
            fillsLeft = fillsLeft - 1;
        } else {
            disown prescription;
            ->Empty;
        }
    }
}

/* A Pharmacy keeps a record of all the prescriptions that patients have submitted as well as how many times each prescription has been filled.
 * Before filling a prescription, the pharmacy must make sure that there is at least one refill available.
 */
main contract Pharmacy {
    PharmacyPrescriptionRecordList@Shared prescriptions;

	// Must be called before the patient can fill a new prescription.
	transaction depositPrescription(Prescription@Owned >> Unowned prescription) {
		if (prescriptions.contains(prescription)) {
            revert "PrescriptionAlreadyDepositedException";
		}

		prescriptions = prescriptions.prependIfNotEmpty(new PharmacyPrescriptionRecord(prescription));
	}

	transaction fillPrescription(Prescription@Unowned prescription) {
		// Can't fill a prescription that wasn't deposited in this pharmacy.
		MaybeRecord result = prescriptions.removeIfExists(prescription);

		if (result in Nothing) {
			revert "PrescriptionNotDepositedException";
		} else {
            PharmacyPrescriptionRecord record = result.getRecord();
            doFill(record);

            record.checkAndUpdateFills();
            prescriptions = prescriptions.prependIfNotEmpty(record);
        }
	}

	private transaction doFill(PharmacyPrescriptionRecord@HasFills record) {
		// This code, which is not shown, notifies the pharmacist to actually fill the prescription.
	}
}

contract Patient {
	string name;

    transaction depositPrescription(Pharmacy@Shared pharmacy, Prescription@Owned >> Unowned prescription) {
        pharmacy.depositPrescription(prescription);
    }

	// Assume that this prescription is for this patient; no separate checking is needed.
	transaction fillPrescription(Pharmacy@Shared pharmacy, Prescription@Unowned prescription) {
		pharmacy.fillPrescription(prescription);
	}
}

